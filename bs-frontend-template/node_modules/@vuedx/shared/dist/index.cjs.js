'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

const Path = require('path');
const Sentry = require('@sentry/node');
const nodeUniqueMachineId = require('node-unique-machine-id');
const os = require('os');
const uuid = require('uuid');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

const Path__default = /*#__PURE__*/_interopDefaultLegacy(Path);
const os__default = /*#__PURE__*/_interopDefaultLegacy(os);

function isNotNull(value) {
    return value != null;
}

function isArray(value) {
    return Array.isArray(value);
}
function first(items) {
    return items[0];
}
function last(items, nth = 1) {
    return items[items.length - nth];
}
function findPrevSibling(items, item) {
    const index = items.indexOf(item);
    if (index > 0)
        return items[index - 1];
}
function findNextSibling(items, item) {
    const index = items.indexOf(item);
    if (index >= 0)
        return items[index + 1];
}
function concat(a, b) {
    const c = [];
    if (isArray(a))
        c.push(...a);
    if (isArray(b))
        c.push(...b);
    return c;
}

function isString(value) {
    return typeof value === 'string';
}
const cacheStringFunction = (fn) => {
    const cache = Object.create(null);
    return ((str) => {
        const hit = cache[str];
        return hit !== null && hit !== void 0 ? hit : (cache[str] = fn(str));
    });
};
const camelizeRE = /[^A-Za-z0-9]+([A-Za-z0-9])/g;
const camelize = cacheStringFunction((str) => {
    return uncapitalize(str.replace(camelizeRE, (_, c) => typeof c === 'string' ? c.toUpperCase() : ''));
});
const camelCase = camelize;
const hyphenateRE = /\B([A-Z])/g;
const hyphenate = cacheStringFunction((str) => {
    return camelize(str).replace(hyphenateRE, '-$1').toLowerCase();
});
const capitalize = cacheStringFunction((str) => {
    return str.charAt(0).toUpperCase() + str.slice(1);
});
const uncapitalize = cacheStringFunction((str) => {
    return str.charAt(0).toLowerCase() + str.slice(1);
});
const pascalCase = cacheStringFunction((str) => capitalize(camelize(str)));
const kebabCase = hyphenate;
function isKebabCase(str) {
    return str.includes('-');
}
function isPascalCase(str) {
    return /^[A-Z][A-Za-z0-9]*$/.test(str);
}
function isCamelCase(str) {
    return /^[a-z][A-Za-z0-9]*$/.test(str);
}

function getComponentName(fileName) {
    return pascalCase(Path__default['default'].posix.basename(fileName).replace(/\.(vue|ts|tsx|js|jsx)$/, ''));
}
function getComponentNameAliases(fileNameOrComponentName) {
    const name = Path__default['default'].posix
        .basename(fileNameOrComponentName)
        .replace(/\.(vue|ts|tsx|js|jsx)$/, '');
    return isKebabCase(name)
        ? [kebabCase(name)]
        : [kebabCase(name), pascalCase(name)];
}

function isNumber(value) {
    return typeof value === 'number' && !Number.isNaN(value);
}

function getRelativeFileName(importingFileName, importedFileName) {
    if (Path__default['default'].posix.isAbsolute(importingFileName) &&
        Path__default['default'].posix.isAbsolute(importedFileName)) {
        const fileName = Path__default['default'].posix.relative(Path__default['default'].posix.dirname(importingFileName), importedFileName);
        return fileName.startsWith('.') ? fileName : `./${fileName}`;
    }
    return importedFileName;
}

class Telemetry {
    constructor(key, options, defaults) {
        var _a, _b;
        this.user = {
            id: this.getUserId(),
        };
        this.optOut = 
            ((_a = process.env.VUEDX_TELEMETRY) === null || _a === void 0 ? void 0 : _a.toLowerCase()) === 'off' ||
            ((_b = process.env.VUEDX_TELEMETRY) === null || _b === void 0 ? void 0 : _b.toLowerCase()) === 'false';
        Sentry.init({
            dsn: key,
            defaultIntegrations: false,
            release: options.release,
            environment: options.environment,
            tracesSampleRate: options.tracesSampleRate,
        });
        this.defaults = {
            sessionId: uuid.v4(),
            nodeVersion: process.version,
            os: os__default['default'].platform(),
            ...defaults,
        };
    }
    getUserId() {
        try {
            return nodeUniqueMachineId.machineSync(false, true);
        }
        catch (_a) {
            return '';
        }
    }
    trace(name, description) {
        var _a;
        if (this.optOut)
            return () => { };
        const activeTransaction = (_a = Sentry.getCurrentHub()
            .getScope()) === null || _a === void 0 ? void 0 : _a.getTransaction();
        if (activeTransaction == null) {
            const transaction = Sentry.startTransaction({
                name,
                description,
            });
            Sentry.configureScope((scope) => {
                scope.setSpan(transaction);
            });
            return () => {
                Sentry.captureMessage(`[trace] ${name}`, (scope) => {
                    scope.setSpan(transaction);
                    scope.setUser(this.user);
                    scope.setTags({ ...this.defaults });
                    scope.setLevel(Sentry.Severity.Info);
                    return scope;
                });
                transaction.finish();
                Sentry.configureScope((scope) => {
                    scope.setSpan(undefined);
                });
            };
        }
        else {
            const child = activeTransaction.startChild({
                op: name,
                description,
            });
            return () => {
                child.finish();
            };
        }
    }
    collect(key, value) {
        if (this.optOut)
            return;
        const tags = {};
        const allowed = new Set(['string', 'number', 'boolean']);
        Object.entries(value).forEach(([key, value]) => {
            if (allowed.has(typeof value)) {
                tags[`data_${key}`] = value;
            }
        });
        Sentry.captureEvent({
            message: `${key}`,
            level: Sentry.Severity.Info,
            user: this.user,
            tags: {
                ...this.defaults,
                ...tags,
            },
            extra: value,
        });
    }
    error(payload) {
        if (this.optOut)
            return;
        if (typeof payload === 'string') {
            payload = new Error(payload);
        }
        void Sentry.captureException(payload, {
            level: Sentry.Severity.Fatal,
            user: this.user,
            tags: {
                ...this.defaults,
            },
        });
    }
    static get instance() {
        if (this._instance == null) {
            throw new Error('Use "Telemetry.setup()" to instantiate telemetry client.');
        }
        return this._instance;
    }
    static setup(key, packageName, packageVersion, tracesSampleRate, defaults) {
        this._instance = new Telemetry(key, {
            release: packageVersion,
            environment: packageVersion.includes('-') ? 'insiders' : 'production',
            tracesSampleRate,
        }, {
            ...defaults,
            packageName,
        });
    }
    static extend(defaults) {
        Object.assign(this.instance.defaults, defaults);
    }
    static optOut() {
        if (this._instance != null) {
            this._instance.optOut = true;
        }
    }
}
async function tracePromise(event, promise) {
    const done = trace(event);
    try {
        return await promise;
    }
    catch (error) {
        collectError(error);
        throw error;
    }
    finally {
        done();
    }
}
function trace(event, description) {
    return Telemetry.instance.trace(event, description);
}
function collectError(error) {
    return Telemetry.instance.error(error);
}
function collect(key, value) {
    return Telemetry.instance.collect(key, value);
}

exports.Telemetry = Telemetry;
exports.camelCase = camelCase;
exports.camelize = camelize;
exports.capitalize = capitalize;
exports.collect = collect;
exports.collectError = collectError;
exports.concat = concat;
exports.findNextSibling = findNextSibling;
exports.findPrevSibling = findPrevSibling;
exports.first = first;
exports.getComponentName = getComponentName;
exports.getComponentNameAliases = getComponentNameAliases;
exports.getRelativeFileName = getRelativeFileName;
exports.hyphenate = hyphenate;
exports.isArray = isArray;
exports.isCamelCase = isCamelCase;
exports.isKebabCase = isKebabCase;
exports.isNotNull = isNotNull;
exports.isNumber = isNumber;
exports.isPascalCase = isPascalCase;
exports.isString = isString;
exports.kebabCase = kebabCase;
exports.last = last;
exports.pascalCase = pascalCase;
exports.trace = trace;
exports.tracePromise = tracePromise;
exports.uncapitalize = uncapitalize;
//# sourceMappingURL=index.cjs.js.map
