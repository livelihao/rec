import { Node, CodegenResult as CodegenResult$1, CompilerError, CompilerOptions, ParserOptions, RootNode } from '@vue/compiler-core';

declare class Scope {
    readonly parent: Scope | null;
    readonly bindings: Record<string, Node | null>;
    constructor(parent?: Scope | null);
    get identifiers(): string[];
    get globals(): string[];
    getBinding(identifier: string): null | Node;
    setBinding(identifer: string, node: Node): void;
}

declare module '@vue/compiler-core' {
  export interface Node {
    scope: Scope
  }
}

interface ComponentImport {
    path: string;
    named?: boolean;
    name?: string;
}
interface Options {
    filename: string;
    components?: Record<string, ComponentImport>;
}
interface CodegenResult extends CodegenResult$1 {
    errors: CompilerError[];
    /**
     * Positions of expressions.
     *
     * [offset, length]
     */
    expressions: Array<[number, number]>;
    /**
     * Each tuple represents an simple expression (mostly identifier).
     *
     * [generatedOffset, generatedLength, sourceOffset, sourceLength, prefixLength]
     */
    mappings: Array<[number, number, number, number, number]>;
}

declare function compile(template: string, options: Options & CompilerOptions): CodegenResult;
declare function parse(template: string, options: ParserOptions): RootNode;

export { CodegenResult, ComponentImport, Options, compile, parse };
